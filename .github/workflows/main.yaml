name: CI/CD Pipeline

on:
  workflow_dispatch: {}

  push:
    branches: [ main ]
    paths:
      - "templates/**"
      - "main.go"
      - "Dockerfile"
      - "k3s/deployment.yaml"
      - "k3s/service.yaml"
      - "k3s/namespace.yaml"

  pull_request:
    branches: [ main ]
    paths:
      - "templates/**"
      - "main.go"
      - "Dockerfile"
      - "k3s/deployment.yaml"
      - "k3s/service.yaml"
      - "k3s/namespace.yaml"
    
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Obter código-fonte
        uses: actions/checkout@v4

      - name: Fazer Login no DockeHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Construir e enviar imagem Docker
        run: |
          NEW_VERSION="v${{ github.run_number }}"
          docker build -t dellabeneta/pip:$NEW_VERSION .
          docker push dellabeneta/pip:$NEW_VERSION

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Obter código-fonte
        uses: actions/checkout@v4

      - name: Configurar acesso ao cluster K3S
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Realizar deploy no Kubernetes (K3S)
        run: |
          NEW_VERSION="v${{ github.run_number }}"
          echo "Nova versão da aplicação: $NEW_VERSION"

          # Atualiza a imagem no arquivo de deployment com a nova versão
          sed -i "s|image: .*|image: dellabeneta/pip:$NEW_VERSION|g" k3s/deployment.yaml

          # Aplica o manifesto no cluster Kubernetes
          kubectl apply -f k3s/deployment.yaml
